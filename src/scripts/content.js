chrome.runtime.onMessage.addListener(async (request) => {
  if (request.type === "openModal") {
    const body = document.querySelector("body");
    const root = document.createElement("div");
    root.setAttribute("class", "root");
    const shadow = root.attachShadow({ mode: "open" });
    const modalLayout = document.createElement("div");
    modalLayout.setAttribute("class", "modal-layout");
    const title = createElement("h1", "title", "Lexi");
    const wrapperHeader = createWrapper("wrapper", "content-header");
    const wrapperMenu = createWrapper("wrapper", "content-menu");
    const wrapperContentMenu = createWrapper("wrapper", "content-content-menu");
    const wrapperSelectedText = createWrapper("wrapper");
    const wrapperTranslateText = createWrapper("wrapper");
    const wrapperSuggestionText = createWrapper(
      "wrapper",
      "content-suggestion-text"
    );
    const wrapperLoginButton = createWrapper("wrapper", "content-login-button");
    const wrapperContentTranslateText = createWrapper(
      "wrapper-content-translated-text"
    );
    const wrapperContentSuggestionText = createWrapper(
      "wrapper-content-suggestion-text"
    );
    const menu = createElement("div", "menu-button", "Menu");
    const titleSelectedText = createElement(
      "div",
      "content-title",
      "Selected text"
    );
    const titleTranslatedText = createElement(
      "div",
      "content-title",
      "Translated Text"
    );
    const titleSuggestionText = createElement(
      "div",
      "content-title",
      `Example sentence with the word: ${request.message?.text}`
    );
    const contentSelectedText = createElement(
      "p",
      "content-selected-text",
      request.message.text
    );
    const contentTranslatedText = createElement(
      "p",
      "content-translated-text",
      ""
    );
    const contentSuggestionText = createElement(
      "p",
      "content-suggestion-text-p",
      "Lorem Ipsum is simply dummy text of the printing and typesetting industry"
    );
    const textButton = request.message.login
      ? "Save to notion"
      : "Login with notion";

    const loginButton = createElement("button", "login-button", textButton);
    const logoutButton = createElement("button", "logout-button", "Logout");
    const generatedButton = createElement(
      "button",
      "generated-button",
      "Gegerate sentence"
    );
    const span = createElement(
      "span",
      "span-warn",
      "This text is generated by AI, it may contain errors."
    );

    const loaderTranslated = createElement("span", "loader", "");
    const loaderSuggestion = createElement(
      "span",
      "loader loader-suggestion-text",
      ""
    );

    const style = createStyle();

    shadow.appendChild(style);
    shadow.appendChild(modalLayout);
    body.insertAdjacentElement("afterbegin", root);
    modalLayout.appendChild(wrapperHeader);
    wrapperHeader.appendChild(title);
    wrapperMenu.appendChild(menu);
    wrapperHeader.appendChild(wrapperMenu);
    wrapperContentMenu.appendChild(logoutButton);
    wrapperMenu.appendChild(wrapperContentMenu);
    wrapperSelectedText.appendChild(titleSelectedText);
    wrapperSelectedText.appendChild(contentSelectedText);

    wrapperTranslateText.appendChild(titleTranslatedText);
    wrapperTranslateText.appendChild(wrapperContentTranslateText);
    wrapperContentTranslateText.appendChild(contentTranslatedText);
    wrapperContentTranslateText.appendChild(loaderTranslated);

    wrapperSuggestionText.appendChild(titleSuggestionText);
    wrapperSuggestionText.appendChild(wrapperContentSuggestionText);
    wrapperContentSuggestionText.appendChild(contentSuggestionText);
    wrapperContentSuggestionText.appendChild(loaderSuggestion);
    wrapperSuggestionText.appendChild(generatedButton);

    wrapperLoginButton.appendChild(loginButton);
    wrapperLoginButton.insertAdjacentElement("afterbegin", span);
    modalLayout.appendChild(wrapperSelectedText);
    modalLayout.appendChild(wrapperTranslateText);
    modalLayout.appendChild(wrapperSuggestionText);
    modalLayout.appendChild(wrapperLoginButton);
    const rootNode = document.querySelector(".root");
    const nodes = rootNode && root.shadowRoot;
    const loginButtonNode = nodes.querySelector(".login-button");
    const generatedButtonNode = nodes.querySelector(".generated-button");
    const suggestionText = nodes.querySelector(".content-suggestion-text-p");
    const loader = nodes.querySelector(".loader-suggestion-text");
    const wrapperActionsMenu = nodes.querySelector(
      ".wrapper.content-content-menu"
    );

    loginButtonNode.addEventListener("click", async () => {
      loginButtonNode.textContent = "Loading...";
      startLogin(request);
    });

    menu.addEventListener("click", () => {
      wrapperActionsMenu.classList.toggle("active");
    });

    logoutButton.addEventListener("click", async () => {
      loginButtonNode.textContent = "Login with notion";
      sendMessage({ type: "logout", login: false });
    });
    await chrome.runtime.sendMessage({
      type: "translated",
      text: request.message?.text,
    });

    generatedButtonNode.addEventListener("click", async () => {
      generatedButtonNode.style = "display: none;";
      suggestionText.style = "filter: none";
      suggestionText.textContent = "";
      loader.style = "display: block";
      await chrome.runtime.sendMessage({
        type: "suggestion",
        text: request.message?.text,
      });
    });
  }
});

async function startLogin(request) {
  const { authToken } = await chrome.storage.local.get("authToken");
  if (authToken) {
    sendMessage({ type: "auth", login: true, text: request.message.text });
  } else {
    sendMessage({ type: "auth", login: false });
  }
}

chrome.runtime.onMessage.addListener(async (request) => {
  const rootNode = document.querySelector(".root");
  const nodes = rootNode.shadowRoot;
  const suggestionText = nodes.querySelector(".content-suggestion-text-p");
  const translatedText = nodes.querySelector(".content-translated-text");
  const loginButton = nodes.querySelector(".login-button");
  const loader = nodes.querySelector(".loader");
  const loaderSuggestionText = nodes.querySelector(".loader-suggestion-text");

  if (request.type === "translated") {
    const message = await request.message;
    loader.style = "display: none";
    translatedText.innerText = message.data;
  }
  if (request.type === "suggestion") {
    const message = await request.message;
    loaderSuggestionText.style = "display: none";
    suggestionText.innerText = message.data;
  }
  if (request.type === "login" && request.message.login) {
    loginButton.innerText = "Save to notion";
  } else {
    loginButton.innerText = "Login with notion";
  }

  if (request.type === "logout") {
    loginButton.innerText = "Login with notion";
  }
});

function createElement(element, className, content = "Hello World") {
  const ele = document.createElement(element);
  ele.setAttribute("class", className);
  ele.innerText = content;
  return ele;
}

function createWrapper(firstClass, classPlus = "") {
  const wrapper = document.createElement("div");
  wrapper.setAttribute("class", `${firstClass} ${classPlus}`);
  return wrapper;
}

function sendMessage(message) {
  chrome.runtime.sendMessage(message);
}

function createStyle() {
  const style = document.createElement("style");
  style.textContent = `
  * {
    box-sizing: border-box;
    padding: 0;
    margin: 0
  }

  .modal-layout {
    border-radius: 16px;
    background: rgb(251, 251, 250);
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    padding: 1rem;
    width: 100%;
    max-width: 548px;
    z-index: 1000;
  }
  .title, .content-title {
    color: rgb(55, 53, 47);
  }
  .title {
    margin: 0;
  }
  .content-title {
    font-weight: 600;
    margin-bottom: .25rem;
  }
  .wrapper {
    border-bottom: 1px solid #ccc;
    color: rgba(25, 23, 17, 0.6);
    margin-bottom: 1rem;
    position: relative;
  }
  .wrapper.content-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    position: relative;
    z-index: 100;
  }

  .wrapper.content-content-menu {
    background: rgb(55, 53, 47);
    border-radius: 4px;
    position: absolute;
    right: 0;
    top: 30px;
    padding: 1rem;
    opacity: 0;
  }
  .wrapper.content-content-menu.active {
    opacity: 1;
  }
  .menu-button {
    cursor: pointer;
  }
  .wrapper:nth-child(4) {
    margin-bottom: 0;
  }
  .wrapper:last-child {
    border-bottom: none;
    margin-bottom: 0;
  }

  .wrapper-content-translated-text {
    display: flex;
    flex-direction: column;
    justify-content: center;
    min-height: 45px;
  }
  .wrapper-content-suggestion-text {
    display: flex;
    flex-direction: column;
    justify-content: center;
  }
  .wrapper.content-suggestion-text {
    min-height: 120px;
  }

  .content-suggestion-text-p {
    filter: blur(5px)
  }

  .generated-button {
    background: none;
    border: 2px solid rgb(18, 18, 18);
    border-radius: 4px;
    cursor: pointer;
    color: rgb(18, 18, 18);
    font-size: 1rem;
    padding: .25rem .875rem;
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);

  }
  .wrapper.content-login-button {
    display: flex;
    flex-direction: column;
    justify-content: flex-end;
  }

  .span-warn {
    font-size: .75rem;
  }

  .login-button {
    background: none;
    border: none;
    border-radius: 4px;
    background: rgb(18, 18, 18);
    cursor: pointer;
    align-self: flex-end;
    font-size: 1rem;
    padding: .25rem .875rem;
    margin-top: 1rem;
    min-width: 148px;
  }

  .logout-button {
    background: none;
    border: none;
    color: rgb(251, 251, 250);
    cursor: pointer;
  }

  .loader {
    width: 32px;
    height: 32px;
    border-radius: 50%;
    display: inline-block;
    border-top: 3px solid rgb(18, 18, 18);
    border-right: 3px solid transparent;
    box-sizing: border-box;
    position: absolute;
    align-self: center;
    animation: rotation 1s linear infinite;
  }

  .loader-suggestion-text {
    display: none;
  }
  @keyframes rotation {
    0% {
      transform: rotate(0deg);
    }
    100% {
      transform: rotate(360deg);
    }
  } 

  `;
  return style;
}
